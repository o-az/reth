# Documentation and mdbook related jobs.

name: book

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, closed]
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Install Playwright browsers
        working-directory: book/vocs/
        # Required for rehype-mermaid to render Mermaid diagrams during build
        run: |
          bun i
          npx playwright install --with-deps chromium

      - name: Build Vocs
        working-directory: book/vocs/
        run: |
          bun run build
          echo "Vocs Build Complete"

      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        working-directory: book/vocs
        run: |-
          bun x wrangler@latest deploy --config=wrangler.toml --keep-vars >> /tmp/vocs_deploy.txt

      - name: Set Deploy Output
        run: |
          {
            echo 'DEPLOY_OUTPUT<<EOF'
            tail -n 2 /tmp/vocs_deploy.txt
            echo 'EOF'
          } >> $GITHUB_ENV

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          LAST_UPDATED_AT: ${{ github.event.pull_request.updated_at }}
        with:
          debug: true
          script: |-
            const commentBody = `
              <1>Freshly Deployed Vocs</1>
              ${process.env.DEPLOY_OUTPUT}

              **${process.env.LAST_UPDATED_AT}**
            `

            const prComments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            const [botDeploymentComment] = prComments.data.filter(comment => comment.body.includes('Freshly Deployed Vocs'))

            if (!botDeploymentComment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              })
            } else {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botDeploymentComment.id,
                body: commentBody
              })
            }